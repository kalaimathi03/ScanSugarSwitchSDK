// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name scanflowWebserviceSDK
import Accelerate
import CoreMedia
import CoreVideo
import Foundation
import ScanflowCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import opencv2
@_exported import scanflowWebserviceSDK
public protocol APIDataDelegate : AnyObject {
  func didReceiveData(_ data: Foundation.Data)
  func didFailWithError(_ error: any Swift.Error)
}
@_hasMissingDesignatedInitializers public class WebserviceSDK {
  weak public var delegate: (any scanflowWebserviceSDK.APIDataDelegate)?
  public static func createInstance() -> scanflowWebserviceSDK.WebserviceSDK
  public func getSugarcaneOrSwitchData(type: Swift.String, image: UIKit.UIImage)
  @objc deinit
}
public struct SugarcaneDataModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OutScore {
}
public struct DetectedBox {
}
@objc public enum TireScanningMode : Swift.Int {
  case tireSerialNumberScanning
  case tireDotScanning
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ContainerScanningMode : Swift.Int {
  case verticle
  case horizontal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(ScanflowTextManager) public class WebserviceCameraManager : ScanflowCore.ScanflowCameraManager {
  @objc public var startCapture: Swift.Bool
  @objc(init:::::::::) override public init(previewView: UIKit.UIView, scannerMode: ScanflowCore.ScannerMode, overlayApperance: ScanflowCore.OverlayViewApperance, overCropNeed: Swift.Bool = false, leftTopArc: UIKit.UIColor = .topLeftArrowColor, leftDownArc: UIKit.UIColor = .bottomLeftArrowColor, rightTopArc: UIKit.UIColor = .topRightArrowColor, rightDownArc: UIKit.UIColor = .bottomRightArrowColor, locationNeed: Swift.Bool = false)
  @objc(startCaptureData) public func startCaptureData()
  @objc deinit
}
extension scanflowWebserviceSDK.WebserviceCameraManager : ScanflowCore.CaptureDelegate {
  @objc dynamic public func readData(originalframe: CoreVideo.CVPixelBuffer, croppedFrame: CoreVideo.CVPixelBuffer)
}
extension scanflowWebserviceSDK.TireScanningMode : Swift.Equatable {}
extension scanflowWebserviceSDK.TireScanningMode : Swift.Hashable {}
extension scanflowWebserviceSDK.TireScanningMode : Swift.RawRepresentable {}
extension scanflowWebserviceSDK.ContainerScanningMode : Swift.Equatable {}
extension scanflowWebserviceSDK.ContainerScanningMode : Swift.Hashable {}
extension scanflowWebserviceSDK.ContainerScanningMode : Swift.RawRepresentable {}
